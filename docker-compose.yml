version: "3.7"
services:
  app:
    build:
      context: ./
      dockerfile: Dockerfile
    image: mechanicsheep
    container_name: mechanicsheep-app
    restart: unless-stopped
    working_dir: /var/www/
    networks:
      - mechanicsheep

  db:
    image: mysql:5.7
    container_name: mechanicsheep-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
      #expose:
    ports:
      - "8179:3306"
    volumes:
      - ./docker-compose/mysql/var/lib/mysql:/var/lib/mysql
      - ./docker-compose/mysql/etc/mysql/mysql.conf.d/:/etc/mysql/mysql.conf.d/
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
    networks:
      - mechanicsheep

  nginx:
    image: nginx:alpine
    container_name: mechanicsheep-nginx
    restart: unless-stopped
    expose:
      - "80"
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d/
    networks:
      - mechanicsheep
    environment:
      - VIRTUAL_HOST=www.seminariounlu.duckdns.org, seminariounlu.duckdns.org
      - LETSENCRYPT_HOST=seminariounlu.duckdns.org
      - LETSENCRYPT_EMAIL=normandagustin@gmail.com
    depends_on:
      - nginx-proxy
      - letsencrypt

  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:ro
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    networks:
      - mechanicsheep

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: unless-stopped
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
    volumes:
      - certs:/etc/nginx/certs:rw
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mechanicsheep

  adminer:
    image: adminer
    container_name: mechanicsheep-db-adminer
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - mechanicsheep

networks:
  mechanicsheep:
    driver: bridge

volumes:
  certs:
  vhostd:
  html:
